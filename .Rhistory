)
),
text = ~paste("Price: ", `Unit Price ($ PSM)`, "$/sqm<br>Area: ", `Area (SQM)`, "sqm<br>Quarter: ", Quarter)) %>%
layout(title = 'Interactive Scatter Plot of Unit Price vs. Area by Category',
xaxis = list(title = 'Area (SQM)'),
yaxis = list(title = 'Unit Price ($ PSM)'),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(label = q, method = "restyle", args = list("transforms[0].value", q))
})
)))
P3_interactive
library(dplyr)
library(plotly)
data_cleaned <- data_cleaned %>%
mutate(
Quarter = as.factor(ifelse(month(`Sale Date`) %in% c(1, 2, 3), "Q1",
ifelse(month(`Sale Date`) %in% c(4, 5, 6), "Q2",
ifelse(month(`Sale Date`) %in% c(7, 8, 9), "Q3", "Q4"))))
P3_interactive <- plot_ly(
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQM)`, y = ~`Unit Price ($ PSM)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]
)
),
text = ~paste("Price: ", `Unit Price ($ PSM)`, "$/sqm<br>Area: ", `Area (SQM)`, "sqm<br>Quarter: ", Quarter)) %>%
layout(title = 'Interactive Scatter Plot of Unit Price vs. Area by Category',
xaxis = list(title = 'Area (SQM)'),
yaxis = list(title = 'Unit Price ($ PSM)'),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(label = q, method = "restyle", args = list("transforms[0].value", q))
})
)))
P3_interactive
library(dplyr)
# If you're using date functions like month(), ensure lubridate is loaded
library(lubridate)
data_cleaned <- data %>%
mutate(
`Sale Date` = dmy(`Sale Date`),  # Convert Sale Date to Date format
`Area (SQM)` = as.numeric(gsub(",", "", `Area (SQM)`)),  # Remove commas and convert to numeric
`Unit Price ($ PSM)` = as.numeric(gsub("\\$", "", gsub(",", "", `Unit Price ($ PSM)`)))  # Remove dollar signs and commas, convert to numeric
) %>%
mutate(
`Area (SQM)` = ifelse(is.na(`Area (SQM)`), 0, `Area (SQM)`)  # Replace NA in Area with 0
) %>%
mutate(
Area_Category = cut(
`Area (SQM)`,
breaks = c(0, 100, 200, 300, 400, Inf),
labels = c("<100", "100-200", "200-300", "300-400", ">400"),
include.lowest = TRUE
)
) %>%
mutate(
Quarter = ifelse(month(`Sale Date`) %in% c(1, 2, 3), "Q1",
ifelse(month(`Sale Date`) %in% c(4, 5, 6), "Q2",
ifelse(month(`Sale Date`) %in% c(7, 8, 9), "Q3", "Q4")))  # Add Quarter based on Sale Date
)
# Now data_cleaned includes the Quarter information
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQM)`, y = ~`Unit Price ($ PSM)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]
)
),
text = ~paste("Price: ", `Unit Price ($ PSM)`, "$/sqm<br>Area: ", `Area (SQM)`, "sqm<br>Quarter: ", Quarter)) %>%
layout(title = 'Interactive Scatter Plot of Unit Price vs. Area by Category',
xaxis = list(title = 'Area (SQM)'),
yaxis = list(title = 'Unit Price ($ PSM)'),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(label = q, method = "restyle", args = list("transforms[0].value", q))
})
)))
P3_interactive
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQM)`, y = ~`Unit Price ($ PSM)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]
),
list(
type = 'filter',
target = ~`Type of Sale`,
operation = '=',
value = unique(data_cleaned$`Type of Sale`)[1]
)
),
text = ~paste("Price: ", `Unit Price ($ PSM)`, "$/sqm<br>Area: ", `Area (SQM)`, "sqm<br>Quarter: ", Quarter, "<br>Type of Sale: ", `Type of Sale`)) %>%
layout(title = 'Interactive Scatter Plot of Unit Price vs. Area by Category',
xaxis = list(title = 'Area (SQM)'),
yaxis = list(title = 'Unit Price ($ PSM)'),
updatemenus = list(
list(
type = "dropdown",
direction = "down",
showactive = TRUE,
buttons = lapply(unique(data_cleaned$`Type of Sale`), function(type) {
list(
method = "restyle",
args = list("transforms[1].value", type),
label = type
)
})
)
),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(
label = q,
method = "restyle",
args = list("transforms[0].value", q)
)
})
)))
P3_interactive
library(dplyr)
library(lubridate)
# Check that 'data' is a dataframe
if (!is.data.frame(data)) {
stop("Data is not a dataframe")
}
# Perform the mutations step by step to avoid complexity and potential errors
data_cleaned <- data %>%
mutate(`Sale Date` = dmy(`Sale Date`)) %>%
mutate(`Area (SQM)` = as.numeric(gsub(",", "", `Area (SQM)`))) %>%
mutate(`Unit Price ($ PSM)` = as.numeric(gsub("\\$", "", gsub(",", "", `Unit Price ($ PSM)`)))) %>%
mutate(`Area (SQM)` = ifelse(is.na(`Area (SQM)`), 0, `Area (SQM)`)) %>%
mutate(Area_Category = cut(
`Area (SQM)`,
breaks = c(0, 100, 200, 300, 400, Inf),
labels = c("<100", "100-200", "200-300", "300-400", ">400"),
include.lowest = TRUE
))
# Adding Quarter separately
data_cleaned <- data_cleaned %>%
mutate(Quarter = ifelse(month(`Sale Date`) %in% c(1, 2, 3), "Q1",
ifelse(month(`Sale Date`) %in% c(4, 5, 6), "Q2",
ifelse(month(`Sale Date`) %in% c(7, 8, 9), "Q3", "Q4"))))
# Output the structure of data_cleaned to confirm changes
str(data_cleaned)
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQM)`, y = ~`Unit Price ($ PSM)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]
)
),
text = ~paste("Price: ", `Unit Price ($ PSM)`, "$/sqm<br>Area: ", `Area (SQM)`, "sqm<br>Quarter: ", Quarter)) %>%
layout(title = 'Interactive Scatter Plot of Unit Price vs. Area by Category',
xaxis = list(title = 'Area (SQM)'),
yaxis = list(title = 'Unit Price ($ PSM)'),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(label = q, method = "restyle", args = list("transforms[0].value", q))
})
)))
P3_interactive
library(dplyr)
library(lubridate)
# Check that 'data' is a dataframe
if (!is.data.frame(data)) {
stop("Data is not a dataframe")
}
# Perform the mutations step by step to avoid complexity and potential errors
data_cleaned <- combined_data %>%
mutate(`Sale Date` = dmy(`Sale Date`)) %>%
mutate(`Area (SQM)` = as.numeric(gsub(",", "", `Area (SQM)`))) %>%
mutate(`Unit Price ($ PSM)` = as.numeric(gsub("\\$", "", gsub(",", "", `Unit Price ($ PSM)`)))) %>%
mutate(`Area (SQM)` = ifelse(is.na(`Area (SQM)`), 0, `Area (SQM)`)) %>%
mutate(Area_Category = cut(
`Area (SQM)`,
breaks = c(0, 100, 200, 300, 400, Inf),
labels = c("<100", "100-200", "200-300", "300-400", ">400"),
include.lowest = TRUE
))
# Adding Quarter separately
data_cleaned <- data_cleaned %>%
mutate(Quarter = ifelse(month(`Sale Date`) %in% c(1, 2, 3), "Q1",
ifelse(month(`Sale Date`) %in% c(4, 5, 6), "Q2",
ifelse(month(`Sale Date`) %in% c(7, 8, 9), "Q3", "Q4"))))
# Output the structure of data_cleaned to confirm changes
str(data_cleaned)
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQM)`, y = ~`Unit Price ($ PSM)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]
)
),
text = ~paste("Price: ", `Unit Price ($ PSM)`, "$/sqm<br>Area: ", `Area (SQM)`, "sqm<br>Quarter: ", Quarter)) %>%
layout(title = 'Interactive Scatter Plot of Unit Price vs. Area by Category',
xaxis = list(title = 'Area (SQM)'),
yaxis = list(title = 'Unit Price ($ PSM)'),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(label = q, method = "restyle", args = list("transforms[0].value", q))
})
)))
P3_interactive
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQM)`, y = ~`Unit Price ($ PSM)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]
),
list(
type = 'filter',
target = ~`Type of Sale`,
operation = '=',
value = unique(data_cleaned$`Type of Sale`)[1]
)
),
text = ~paste("Price: ", `Unit Price ($ PSM)`, "$/sqm<br>Area: ", `Area (SQM)`, "sqm<br>Quarter: ", Quarter, "<br>Type of Sale: ", `Type of Sale`)) %>%
layout(title = 'Interactive Scatter Plot of Unit Price vs. Area by Category',
xaxis = list(title = 'Area (SQM)'),
yaxis = list(title = 'Unit Price ($ PSM)'),
updatemenus = list(
list(
type = "dropdown",
direction = "down",
showactive = TRUE,
buttons = lapply(unique(data_cleaned$`Type of Sale`), function(type) {
list(
method = "restyle",
args = list("transforms[1].value", type),
label = type
)
})
)
),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(
label = q,
method = "restyle",
args = list("transforms[0].value", q)
)
})
)))
P3_interactive
pacman::p_load(dplyr, purrr, readr, ggiraph,
ggplot2, lubridate, ggrepel,
patchwork, ggthemes, hrbrthemes, tidyverse, plotly, readr)
# Perform the mutations step by step to avoid complexity and potential errors
data_cleaned <- combined_data %>%
mutate(`Sale Date` = dmy(`Sale Date`)) %>%
mutate(`Area (SQM)` = as.numeric(gsub(",", "", `Area (SQM)`))) %>%
mutate(`Unit Price ($ PSM)` = as.numeric(gsub("\\$", "", gsub(",", "", `Unit Price ($ PSM)`)))) %>%
mutate(`Area (SQM)` = ifelse(is.na(`Area (SQM)`), 0, `Area (SQM)`)) %>%
mutate(Area_Category = cut(
`Area (SQM)`,
breaks = c(0, 100, 200, 300, 400, Inf),
labels = c("<100", "100-200", "200-300", "300-400", ">400"),
include.lowest = TRUE
))
# Adding Quarter separately
data_cleaned <- data_cleaned %>%
mutate(Quarter = ifelse(month(`Sale Date`) %in% c(1, 2, 3), "Q1",
ifelse(month(`Sale Date`) %in% c(4, 5, 6), "Q2",
ifelse(month(`Sale Date`) %in% c(7, 8, 9), "Q3", "Q4"))))
# Output the structure of data_cleaned to confirm changes
str(data_cleaned)
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQM)`, y = ~`Unit Price ($ PSM)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]
)
),
text = ~paste("Price: ", `Unit Price ($ PSM)`, "$/sqm<br>Area: ", `Area (SQM)`, "sqm<br>Quarter: ", Quarter)) %>%
layout(title = 'Interactive Scatter Plot of Unit Price vs. Area by Category',
xaxis = list(title = 'Area (SQM)'),
yaxis = list(title = 'Unit Price ($ PSM)'),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(label = q, method = "restyle", args = list("transforms[0].value", q))
})
)))
P3_interactive
F1 <- ggplot(combined_data, aes(x = `Property Type`)) +
geom_bar_interactive(aes(fill = `Planning Region`), position = "dodge") +
labs(x = "Property Type", y = "Frequency",
title = "Frequency of Property Types by Planning Region") +
facet_wrap(~ `Planning Region`, scales = "free") +
theme_stata(base_size = 2.5)
theme(axis.text.x = element_text(angle = 45, hjust = 1))
F1
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQM)`, y = ~`Unit Price ($ PSM)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]
)
),
text = ~paste("Price: ", `Unit Price ($ PSM)`, "$/sqm<br>Area: ", `Area (SQM)`, "sqm<br>Quarter: ", Quarter)) %>%
layout(title = 'Interactive Scatter Plot of Unit Price vs. Area by Category',
xaxis = list(title = 'Area (SQM)'),
yaxis = list(title = 'Unit Price ($ PSM)'),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(label = q, method = "restyle", args = list("transforms[0].value", q))
})
)))
P3_interactive
P3_interactive
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQM)`, y = ~`Unit Price ($ PSM)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]
),
list(
type = 'filter',
target = ~`Type of Sale`,
operation = '=',
value = unique(data_cleaned$`Type of Sale`)[1]
)
),
text = ~paste("Price: ", `Unit Price ($ PSM)`, "$/sqm<br>Area: ", `Area (SQM)`, "sqm<br>Quarter: ", Quarter, "<br>Type of Sale: ", `Type of Sale`)) %>%
layout(title = 'Interactive Scatter Plot of Unit Price vs. Area by Category',
xaxis = list(title = 'Area (SQM)'),
yaxis = list(title = 'Unit Price ($ PSM)'),
updatemenus = list(
list(
type = "dropdown",
direction = "down",
showactive = TRUE,
buttons = lapply(unique(data_cleaned$`Type of Sale`), function(type) {
list(
method = "restyle",
args = list("transforms[1].value", type),
label = type
)
})
)
),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(
label = q,
method = "restyle",
args = list("transforms[0].value", q)
)
})
)))
P3_interactive
duplicate <- combined_data %>%
group_by_all() %>%
filter(n()>1) %>%
ungroup()
duplicate
F1
pacman::p_load(dplyr, purrr, readr, ggiraph,
ggplot2, lubridate, ggrepel,
patchwork, ggthemes, hrbrthemes, tidyverse, plotly, readr)
data1 = read_csv("data/ResidentialTransaction20240308160536.csv")
data2 = read_csv("data/ResidentialTransaction20240308160736.csv")
data3 = read_csv("data/ResidentialTransaction20240308161009.csv")
data4 = read_csv("data/ResidentialTransaction20240308161109.csv")
data5 = read_csv("data/ResidentialTransaction20240414220633.csv")
combined_data <- bind_rows(data1, data2, data3, data4, data5)
glimpse(combined_data)
data_cleaned <- combined_data %>%
mutate(`Sale Date` = dmy(`Sale Date`)) %>%
mutate(`Area (SQM)` = as.numeric(gsub(",", "", `Area (SQM)`))) %>%
mutate(`Unit Price ($ PSM)` = as.numeric(gsub("\\$", "", gsub(",", "", `Unit Price ($ PSM)`)))) %>%
mutate(`Area (SQM)` = ifelse(is.na(`Area (SQM)`), 0, `Area (SQM)`)) %>%
mutate(Area_Category = cut(
`Area (SQM)`,
breaks = c(0, 100, 200, 300, 400, Inf),
labels = c("<100", "100-200", "200-300", "300-400", ">400"),
include.lowest = TRUE
))
data_cleaned <- data_cleaned %>%
mutate(Quarter = ifelse(month(`Sale Date`) %in% c(1, 2, 3), "Q1",
ifelse(month(`Sale Date`) %in% c(4, 5, 6), "Q2",
ifelse(month(`Sale Date`) %in% c(7, 8, 9), "Q3", "Q4"))))
str(data_cleaned)
duplicate <- combined_data %>%
group_by_all() %>%
filter(n()>1) %>%
ungroup()
duplicate
F1 <- ggplot(combined_data, aes(x = `Property Type`)) +
geom_bar_interactive(aes(fill = `Planning Region`), position = "dodge") +
labs(x = "Property Type", y = "Frequency",
title = "Frequency of Property Types by Planning Region") +
facet_wrap(~ `Planning Region`, scales = "free") +
theme_stata(base_size = 2.5)
theme(axis.text.x = element_text(angle = 45, hjust = 1))
F1
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQM)`, y = ~`Unit Price ($ PSM)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]
)
),
text = ~paste("Price: ", `Unit Price ($ PSM)`, "$/sqm<br>Area: ", `Area (SQM)`, "sqm<br>Quarter: ", Quarter)) %>%
layout(title = 'Interactive Scatter Plot of Unit Price vs. Area by Category',
xaxis = list(title = 'Area (SQM)'),
yaxis = list(title = 'Unit Price ($ PSM)'),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(label = q, method = "restyle", args = list("transforms[0].value", q))
})
)))
P3_interactive
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQM)`, y = ~`Unit Price ($ PSM)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]
),
list(
type = 'filter',
target = ~`Type of Sale`,
operation = '=',
value = unique(data_cleaned$`Type of Sale`)[1]
)
),
text = ~paste("Price: ", `Unit Price ($ PSM)`, "$/sqm<br>Area: ", `Area (SQM)`, "sqm<br>Quarter: ", Quarter, "<br>Type of Sale: ", `Type of Sale`)) %>%
layout(title = 'Interactive Scatter Plot of Unit Price vs. Area by Category',
xaxis = list(title = 'Area (SQM)'),
yaxis = list(title = 'Unit Price ($ PSM)'),
updatemenus = list(
list(
type = "dropdown",
direction = "down",
showactive = TRUE,
buttons = lapply(unique(data_cleaned$`Type of Sale`), function(type) {
list(
method = "restyle",
args = list("transforms[1].value", type),
label = type
)
})
)
),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(
label = q,
method = "restyle",
args = list("transforms[0].value", q)
)
})
)))
P3_interactive
