labs(title = "Quarterly Average Unit Price ($ PSM) by Area Category for Resale",
x = "Quarter",
y = "Average Price ($ PSM)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
p_line_resale_stacked <- p_line_resale + facet_wrap(~Area_Category, ncol = 1, scales = "free_y")
data_q1_resale <- resale_data %>%
filter(Quarter == "2024 Q1") %>%
mutate(Month = floor_date(`Sale Date`, "month"))
p_box_resale <- ggplot(data_q1_resale, aes(x = Area_Category, y = `Unit Price ($ PSM)`, fill = Area_Category)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.001) +  # Adjusting alpha for visibility
facet_wrap(~Month, scales = "free_y") +
labs(title = "Monthly Unit Price ($ PSM) by Area Category for Resale (Q1 2024)",
x = "Area Category",
y = "Price ($ PSM)") +
theme_minimal() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1))
p_combined_resale <- p_line_resale_stacked / p_box_resale
#| fig-width: 12
#| fig-height: 18
print(p_combined_resale)
resale_data <- data_cleaned %>%
filter(`Type of Sale` == "Resale")
project_stats <- resale_data %>%
filter(`Project Name` != "N.A.") %>%
group_by(`Project Name`) %>%
summarise(
Total_Units = sum(`Number of Units`, na.rm = TRUE),  # Sum up all units for each project
Avg_Unit_Price = mean(`Unit Price ($ PSM)`, na.rm = TRUE),  # Calculate the average price per square meter
.groups = "drop"  # Drop the grouping
)
top_projects <- project_stats %>%
top_n(25, Total_Units) %>%
arrange(desc(Total_Units))
project_order <- top_projects$`Project Name`
top_projects$`Project Name` <- factor(top_projects$`Project Name`, levels = project_order)
resale_data$`Project Name` <- factor(resale_data$`Project Name`, levels = project_order)
p_units <- ggplot(top_projects, aes(x = `Project Name`, y = Total_Units, fill = 'steelblue')) +
geom_bar(stat = "identity") +
labs(y = "Total Number of Units") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
legend.position = "none"
)
p_price <- ggplot(resale_data, aes(x = `Project Name`, y = `Unit Price ($ PSM)`)) +
geom_boxplot() +
labs(y = "Unit Price ($ PSM)") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
legend.position = "none"
)
p_combined <- p_units | p_price
#| fig-width: 12
#| fig-height: 10
p_combined
library(dplyr)
library(lubridate)
data_cleaned <- combined_data %>%
mutate(`Sale Date` = dmy(`Sale Date`)) %>%
mutate(`Area (SQM)` = as.numeric(gsub(",", "", `Area (SQM)`))) %>%
mutate(`Unit Price ($ PSM)` = as.numeric(gsub("\\$", "", gsub(",", "", `Unit Price ($ PSM)`)))) %>%
mutate(`Area (SQM)` = ifelse(is.na(`Area (SQM)`), 0, `Area (SQM)`)) %>%
mutate(Area_Category = cut(
`Area (SQM)`,
breaks = c(0, 100, 200, 300, 400, Inf),
labels = c("<100", "100-200", "200-300", "300-400", ">400"),
include.lowest = TRUE
))
data_cleaned <- data_cleaned %>%
mutate(Quarter = paste(year(`Sale Date`),
ifelse(month(`Sale Date`) %in% c(1, 2, 3), "Q1",
ifelse(month(`Sale Date`) %in% c(4, 5, 6), "Q2",
ifelse(month(`Sale Date`) %in% c(7, 8, 9), "Q3", "Q4"))), sep = "-"))
str(data_cleaned)
library(dplyr)
library(lubridate)
data_cleaned <- combined_data %>%
mutate(`Sale Date` = dmy(`Sale Date`)) %>%
mutate(`Area (SQM)` = as.numeric(gsub(",", "", `Area (SQM)`))) %>%
mutate(`Unit Price ($ PSM)` = as.numeric(gsub("\\$", "", gsub(",", "", `Unit Price ($ PSM)`)))) %>%
mutate(`Area (SQM)` = ifelse(is.na(`Area (SQM)`), 0, `Area (SQM)`)) %>%
mutate(Area_Category = cut(
`Area (SQM)`,
breaks = c(0, 100, 200, 300, 400, Inf),
labels = c("<100", "100-200", "200-300", "300-400", ">400"),
include.lowest = TRUE
))
data_cleaned <- data_cleaned %>%
mutate(Quarter = paste(year(`Sale Date`),
ifelse(month(`Sale Date`) %in% c(1, 2, 3), "Q1",
ifelse(month(`Sale Date`) %in% c(4, 5, 6), "Q2",
ifelse(month(`Sale Date`) %in% c(7, 8, 9), "Q3", "Q4"))), sep = "-"))
str(data_cleaned)
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQM)`, y = ~`Unit Price ($ PSM)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]
)
),
text = ~paste("Price: ", `Unit Price ($ PSM)`, "$/sqm<br>Area: ", `Area (SQM)`, "sqm<br>Quarter: ", Quarter)) %>%
layout(title = 'Interactive Scatter Plot of Unit Price vs. Area by Category',
xaxis = list(title = 'Area (SQM)'),
yaxis = list(title = 'Unit Price ($ PSM)'),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(label = q, method = "restyle", args = list("transforms[0].value", q))
})
)))
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQM)`, y = ~`Unit Price ($ PSM)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]
),
list(
type = 'filter',
target = ~`Type of Sale`,
operation = '=',
value = unique(data_cleaned$`Type of Sale`)[1]
)
),
text = ~paste("Price: ", `Unit Price ($ PSM)`, "$/sqm<br>Area: ", `Area (SQM)`, "sqm<br>Quarter: ", Quarter, "<br>Type of Sale: ", `Type of Sale`)) %>%
layout(title = 'Interactive Scatter Plot of Unit Price vs. Area by Category',
xaxis = list(title = 'Area (SQM)'),
yaxis = list(title = 'Unit Price ($ PSM)'),
updatemenus = list(
list(
type = "dropdown",
direction = "down",
showactive = TRUE,
buttons = lapply(unique(data_cleaned$`Type of Sale`), function(type) {
list(
method = "restyle",
args = list("transforms[1].value", type),
label = type
)
})
)
),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(
label = q,
method = "restyle",
args = list("transforms[0].value", q)
)
})
)))
library(plotly)
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQM)`, y = ~`Unit Price ($ PSM)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]  # 默认显示第一个季度的数据
)
),
text = ~paste("Price: ", `Unit Price ($ PSM)`, "$/sqm<br>Area: ", `Area (SQM)`, "sqm<br>Quarter: ", Quarter)) %>%
layout(title = 'Interactive Scatter Plot of Unit Price vs. Area by Category',
xaxis = list(title = 'Area (SQM)'),
yaxis = list(title = 'Unit Price ($ PSM)'),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(label = q, method = "restyle", args = list("transforms[0].value", q))
})
)))
P3_interactive
P3_interactive
library(plotly)
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQM)`, y = ~`Unit Price ($ PSM)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]  # 默认显示第一个季度的数据
)
),
text = ~paste("Price: ", `Unit Price ($ PSM)`, "$/sqm<br>Area: ", `Area (SQM)`, "sqm<br>Quarter: ", Quarter)) %>%
layout(title = 'Scatter Plot of Transacted Price vs. Area',
xaxis = list(title = 'Area (SQFT)'),
yaxis = list(title = 'Transacted Price ($ thousands)'),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(label = q, method = "restyle", args = list("transforms[0].value", q))
})
)))
P3_interactive
library(plotly)
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQM)`, y = ~`Unit Price ($ PSM)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]
),
list(
type = 'filter',
target = ~`Type of Sale`,
operation = '=',
value = unique(data_cleaned$`Type of Sale`)[1]
)
),
text = ~paste("Price: ", `Unit Price ($ PSM)`, "$/sqm<br>Area: ", `Area (SQM)`, "sqm<br>Quarter: ", Quarter, "<br>Type of Sale: ", `Type of Sale`)) %>%
layout(title = 'Scatter Plot of Transacted Price vs. Area',
xaxis = list(title = 'Area (SQFT)'),
yaxis = list(title = 'Transacted Price ($ thousands)'),
updatemenus = list(
list(
type = "dropdown",
direction = "down",
showactive = TRUE,
buttons = lapply(unique(data_cleaned$`Type of Sale`), function(type) {
list(
method = "restyle",
args = list("transforms[1].value", type),
label = type
)
})
)
),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(
label = q,
method = "restyle",
args = list("transforms[0].value", q)
)
})
)))
P3_interactive
library(plotly)
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQFT)`, y = ~`Transacted Price ($)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]  # 默认显示第一个季度的数据
),
list(
type = 'filter',
target = ~`Type of Sale`,
operation = '=',
value = unique(data_cleaned$`Type of Sale`)[1]
)
),
text = ~paste("Price: ", `Transacted Price ($)`, "<br>Area: ", `Area (SQFT)`, "<br>Quarter: ", Quarter, "<br>Type of Sale: ", `Type of Sale`)) %>%
layout(title = 'Scatter Plot of Transacted Price vs. Area',
xaxis = list(title = 'Area (SQFT)'),
yaxis = list(title = 'Transacted Price ($)'),
updatemenus = list(
list(
type = "dropdown",
direction = "down",
showactive = TRUE,
buttons = lapply(unique(data_cleaned$`Type of Sale`), function(type) {
list(
method = "restyle",
args = list("transforms[1].value", type),
label = type
)
})
)
),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(
label = q,
method = "restyle",
args = list("transforms[0].value", q)
)
})
)))
P3_interactive
library(plotly)
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQFT)`, y = ~`Transacted Price ($)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]  # 默认显示第一个季度的数据
)
),
text = ~paste("Price: ", `Transacted Price ($)`, "<br>Area: ", `Area (SQFT)`, "<br>Quarter: ", Quarter)) %>%
layout(title = 'Scatter Plot of Transacted Price vs. Area',
xaxis = list(title = 'Area (SQFT)'),
yaxis = list(title = 'Transacted Price ($)'),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(label = q, method = "restyle", args = list("transforms[0].value", q))
})
)))
P3_interactive
P3_interactive
library(plotly)
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQFT)`, y = ~`Transacted Price ($)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]
)
),
text = ~paste("Price: ", `Transacted Price ($)`, "<br>Area: ", `Area (SQFT)`, "<br>Quarter: ", Quarter)) %>%
layout(title = 'Scatter Plot of Transacted Price vs. Area',
xaxis = list(title = 'Area (SQFT)'),
yaxis = list(title = 'Transacted Price ($)'),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(label = q, method = "restyle", args = list("transforms[0].value", q))
})
)))
library(plotly)
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQFT)`, y = ~`Transacted Price ($)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]
),
list(
type = 'filter',
target = ~`Type of Sale`,
operation = '=',
value = unique(data_cleaned$`Type of Sale`)[1]
)
),
text = ~paste("Price: ", `Transacted Price ($)`, "<br>Area: ", `Area (SQFT)`, "<br>Quarter: ", Quarter, "<br>Type of Sale: ", `Type of Sale`)) %>%
layout(title = 'Scatter Plot of Transacted Price vs. Area',
xaxis = list(title = 'Area (SQFT)'),
yaxis = list(title = 'Transacted Price ($)'),
updatemenus = list(
list(
type = "dropdown",
direction = "down",
showactive = TRUE,
buttons = lapply(unique(data_cleaned$`Type of Sale`), function(type) {
list(
method = "restyle",
args = list("transforms[1].value", type),
label = type
)
})
)
),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(
label = q,
method = "restyle",
args = list("transforms[0].value", q)
)
})
)))
P3_interactive
P3_interactive
pacman::p_load(dplyr, purrr, readr, ggiraph,
ggplot2, lubridate, ggrepel,
patchwork, ggthemes, hrbrthemes, tidyverse, plotly, readr)
data1 = read_csv("data/ResidentialTransaction20240308160536.csv")
data2 = read_csv("data/ResidentialTransaction20240308160736.csv")
data3 = read_csv("data/ResidentialTransaction20240308161009.csv")
data4 = read_csv("data/ResidentialTransaction20240308161109.csv")
data5 = read_csv("data/ResidentialTransaction20240414220633.csv")
combined_data <- bind_rows(data1, data2, data3, data4, data5)
glimpse(combined_data)
library(dplyr)
library(lubridate)
data_cleaned <- combined_data %>%
mutate(`Sale Date` = dmy(`Sale Date`)) %>%
mutate(`Area (SQM)` = as.numeric(gsub(",", "", `Area (SQM)`))) %>%
mutate(`Unit Price ($ PSM)` = as.numeric(gsub("\\$", "", gsub(",", "", `Unit Price ($ PSM)`)))) %>%
mutate(`Area (SQM)` = ifelse(is.na(`Area (SQM)`), 0, `Area (SQM)`)) %>%
mutate(Area_Category = cut(
`Area (SQM)`,
breaks = c(0, 100, 200, 300, 400, Inf),
labels = c("<100", "100-200", "200-300", "300-400", ">400"),
include.lowest = TRUE
))
data_cleaned <- data_cleaned %>%
mutate(Quarter = paste(year(`Sale Date`),
ifelse(month(`Sale Date`) %in% c(1, 2, 3), "Q1",
ifelse(month(`Sale Date`) %in% c(4, 5, 6), "Q2",
ifelse(month(`Sale Date`) %in% c(7, 8, 9), "Q3", "Q4"))), sep = "-"))
str(data_cleaned)
duplicate <- combined_data %>%
group_by_all() %>%
filter(n()>1) %>%
ungroup()
duplicate
F1 <- ggplot(combined_data, aes(x = `Property Type`)) +
geom_bar_interactive(aes(fill = `Planning Region`), position = "dodge") +
labs(x = "Property Type", y = "Frequency",
title = "Frequency of Property Types by Planning Region") +
facet_wrap(~ `Planning Region`, scales = "free") +
theme_stata(base_size = 2.5)
theme(axis.text.x = element_text(angle = 45, hjust = 1))
F1
library(plotly)
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQFT)`, y = ~`Transacted Price ($)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]
)
),
text = ~paste("Price: ", `Transacted Price ($)`, "<br>Area: ", `Area (SQFT)`, "<br>Quarter: ", Quarter)) %>%
layout(title = 'Scatter Plot of Transacted Price vs. Area',
xaxis = list(title = 'Area (SQFT)'),
yaxis = list(title = 'Transacted Price ($)'),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(label = q, method = "restyle", args = list("transforms[0].value", q))
})
)))
P3_interactive
library(plotly)
P3_interactive <- plot_ly(data = data_cleaned, x = ~`Area (SQFT)`, y = ~`Transacted Price ($)`, type = 'scatter', mode = 'markers',
hoverinfo = 'text',
transforms = list(
list(
type = 'filter',
target = ~Quarter,
operation = '=',
value = unique(data_cleaned$Quarter)[1]
),
list(
type = 'filter',
target = ~`Type of Sale`,
operation = '=',
value = unique(data_cleaned$`Type of Sale`)[1]
)
),
text = ~paste("Price: ", `Transacted Price ($)`, "<br>Area: ", `Area (SQFT)`, "<br>Quarter: ", Quarter, "<br>Type of Sale: ", `Type of Sale`)) %>%
layout(title = 'Scatter Plot of Transacted Price vs. Area',
xaxis = list(title = 'Area (SQFT)'),
yaxis = list(title = 'Transacted Price ($)'),
updatemenus = list(
list(
type = "dropdown",
direction = "down",
showactive = TRUE,
buttons = lapply(unique(data_cleaned$`Type of Sale`), function(type) {
list(
method = "restyle",
args = list("transforms[1].value", type),
label = type
)
})
)
),
sliders = list(list(
active = 0,
currentvalue = list(prefix = "Quarter: "),
steps = lapply(unique(data_cleaned$Quarter), function(q) {
list(
label = q,
method = "restyle",
args = list("transforms[0].value", q)
)
})
)))
P3_interactive
<br>
